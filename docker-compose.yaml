version: '3'

services:
  nginx:
    image: registry.openanolis.cn/openanolis/nginx:1.14.1-8.6
    ports:
      - "8082:80"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./static:/usr/share/nginx/html
    depends_on:
      - golang-app
      - rag-app
    networks:
      - app-network

  golang-app:
    build:
      context: .
      dockerfile: Dockerfile.golang
    expose:
      - "8080"
    volumes:
      - ./src/config/config.yaml:/app/config/config.yaml
    env_file:
      - .env.api
    depends_on:
      - redis
      - mysql
    networks:
      - app-network
    restart: always

  rag-app:
    build:
      context: .
      dockerfile: Dockerfile.rag
    expose:
      - "8070"
    env_file:
      - .env.api
    depends_on:
      - redis
      - mysql
    networks:
      - app-network
    restart: always

  redis:
    image: registry.cn-hangzhou.aliyuncs.com/library/redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - ./redis/data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    networks:
      - app-network
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  mysql:
    image: registry.cn-hangzhou.aliyuncs.com/library/mysql:8.0
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root123}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-botgroup_chat}
      MYSQL_USER: ${MYSQL_USER:-botgroup}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-botgroup123}
    volumes:
      - ./mysql/data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
    networks:
      - app-network
    restart: always
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  app-network:
    driver: bridge 